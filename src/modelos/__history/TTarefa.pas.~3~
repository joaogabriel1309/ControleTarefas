unit TTarefa;

interface

uses
  System.SysUtils, System.Classes, System.Generics.Collections;

type
  Tarefa = class
  private
    FID: Integer;
    FNome: String;
    FTipo: String;
  public
    constructor Create(AID: Integer; ANome, ATipo: String);

    class function PegarTodas: TList<Tarefa>;
    class function PegarPorID(AID: Integer): Tarefa;

    property ID: Integer read FID write FID;
    property Nome: String read FNome write FNome;
    property Tipo: String read FTipo write FTipo;
  end;

implementation


constructor Tarefa.Create(AID: Integer; ANome, ATipo: String);
begin
  FID := AID;
  FNome := ANome;
  FTipo := ATipo;
end;

class function Tarefa.PegarTodas: TList<Tarefa>;
var
  Lista: TList<Tarefa>;
begin
  Lista := TList<Tarefa>.Create;

  //Buscar todas as tarefas no banco
  Lista.Add(Tarefa.Create(1, 'Criar API', 'Desenvolvimento'));
  Lista.Add(Tarefa.Create(2, 'Testar Funcionalidades', 'QA'));
  Lista.Add(Tarefa.Create(3, 'Corrigir Bugs', 'Manutenção'));

  Result := Lista;
end;

class function Tarefa.PegarPorID(AID: Integer): Tarefa;
var
  Lista: TList<Tarefa>;
  fTarefa: Tarefa;
begin
  Result := nil;

  Lista := PegarTodas;

  try
    for fTarefa in Lista do
    begin
      if fTarefa.ID = AID then
      begin
        Result := fTarefa.Create(fTarefa.ID, fTarefa.Nome, fTarefa.Tipo);
        Break;
      end;
    end;
  finally
    Lista.Free;
  end;
end;

end.

