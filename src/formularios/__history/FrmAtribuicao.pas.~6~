unit FrmAtribuicao;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls;

type
  TTFrmAtribuicao = class(TForm)
    GroupBoxGeral: TGroupBox;
    EditCodUsuario: TEdit;
    EditNomeUsuario: TEdit;
    Label1: TLabel;
    EditCodTarefa: TEdit;
    Label2: TLabel;
    EditNomeTarefa: TEdit;
    ButtonSalvar: TButton;
    ButtonLimpar: TButton;
    ButtonSair: TButton;
    procedure EditCodUsuarioExit(Sender: TObject);
    procedure EditCodTarefaExit(Sender: TObject);
    procedure ButtonLimparClick(Sender: TObject);
    procedure ButtonSairClick(Sender: TObject);
    procedure ButtonSalvarClick(Sender: TObject);
  private
    procedure LimparForm;
    function ValidaDados: TStringList;
  public
    { Public declarations }
  end;

var
  TFrmAtribuicao: TTFrmAtribuicao;

implementation

{$R *.dfm}

uses TUsuario, TTarefa, TUsuarioTarefa;

procedure TTFrmAtribuicao.ButtonLimparClick(Sender: TObject);
begin
  LimparForm;
end;

procedure TTFrmAtribuicao.ButtonSairClick(Sender: TObject);
begin
  Close;
end;

procedure TTFrmAtribuicao.ButtonSalvarClick(Sender: TObject);
var
  fResultValida: TStringList;
  fAtribuicao: UsuarioTarefa;
begin
  fResultValida := ValidaDados();

  if fResultValida.Count >= 1 then
  begin
    Application.MessageBox(PChar(fResultValida.Text), 'Atenção', MB_OK + MB_ICONWARNING);
    Exit;
  end;

  fAtribuicao := UsuarioTarefa.Create(StrToInt(EditCodUsuario.Text),StrToInt(EditCodTarefa.Text));
  try
    if fAtribuicao.Salvar then
    begin
      Application.MessageBox('Atribuição realizada com sucesso!', 'Informação', MB_OK+MB_ICONINFORMATION);
      LimparForm;
    end
    else
      Application.MessageBox('Erro ao realiza atribuição', 'Erro', MB_OK+MB_ICONERROR);
  finally
     fAtribuicao.Free;
  end;
end;

procedure TTFrmAtribuicao.EditCodTarefaExit(Sender: TObject);
var
  fTarefa: Tarefa;
begin
  if (Screen.ActiveControl = ButtonLimpar) or (Screen.ActiveControl = ButtonSair) then Exit;

  if Trim(EditCodTarefa.Text) <> '' then
  begin
    fTarefa := Tarefa.BuscarPorCodigo(StrToIntDef(EditCodTarefa.Text, 0));
    if fTarefa <> nil then
      EditNomeTarefa.Text := fTarefa.Nome
    else
    begin
      Application.MessageBox('Tarefa não encontrado!', 'Informação', MB_OK+MB_ICONINFORMATION);
      EditNomeTarefa.Clear;
      if EditCodTarefa.CanFocus then
        EditCodTarefa.SetFocus;
    end;
  end;
end;

procedure TTFrmAtribuicao.EditCodUsuarioExit(Sender: TObject);
var
  fUsuario: Usuario;
begin
  if (Screen.ActiveControl = ButtonLimpar) or (Screen.ActiveControl = ButtonSair) then Exit;

  if Trim(EditCodUsuario.Text) <> '' then
  begin
    fUsuario := Usuario.BuscarPorCodigo(StrToIntDef(EditCodUsuario.Text,0));
    if fUsuario <> nil then
      EditNomeUsuario.Text := fUsuario.Nome
    else
    begin
      Application.MessageBox('Usúario não encontrado!', 'Informação', MB_OK+MB_ICONINFORMATION);
      EditNomeUsuario.Clear;
      if EditCodUsuario.CanFocus then
        EditCodUsuario.SetFocus;
    end;
  end;
end;

procedure TTFrmAtribuicao.LimparForm;
begin
  EditCodUsuario.Clear;
  EditNomeUsuario.Clear;
  EditCodTarefa.Clear;
  EditNomeTarefa.Clear;
  if EditCodUsuario.CanFocus then
    EditCodUsuario.SetFocus;
end;

function TTFrmAtribuicao.ValidaDados: TStringList;
begin
  Result := TStringList.Create;

  try
    if Trim(EditCodUsuario.Text) = '' then
      Result.Add('* Campo [Usúario] obrigatório!');
    if Trim(EditCodTarefa.Text) = '' then
      Result.Add('* Campo [Tarefa] obrigatório!');
  except
    on E: Exception do
      Result.Free;
  end;
end;

end.
